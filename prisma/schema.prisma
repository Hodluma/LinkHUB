generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  createdAt   DateTime  @default(now())
  plan        Plan      @default(FREE)
  stripeCusId String?
  profiles    Profile[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String
  handle      String    @unique
  displayName String
  bio         String?
  avatarUrl   String?
  verified    Boolean   @default(false)
  theme       Json
  density     String    @default("comfortable")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  links       Link[]
  socials     Social[]
  views       Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
  events      ViewEvent[]
  clicks      ClickEvent[]

  @@index([userId])
}

model Social {
  id        String  @id @default(cuid())
  profileId String
  platform  String
  url       String
  sort      Int     @default(0)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Link {
  id        String   @id @default(cuid())
  profileId String
  label     String
  url       String
  badge     String?
  icon      String?
  sort      Int      @default(0)
  enabled   Boolean  @default(true)
  clicks    Int      @default(0)
  startAt   DateTime?
  endAt     DateTime?
  createdAt DateTime  @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  events    ClickEvent[]
}

model ViewEvent {
  id        String   @id @default(cuid())
  profileId String
  ts        DateTime @default(now())
  referrer  String?
  ua        String?
  ipHash    String?
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ClickEvent {
  id        String   @id @default(cuid())
  linkId    String
  profileId String
  ts        DateTime @default(now())
  referrer  String?
  ua        String?
  ipHash    String?
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
